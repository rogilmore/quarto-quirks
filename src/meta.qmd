# Meta

This page documents some practices that make my workflow more efficient.

## Github

Almost every project starts with a new GitHub repository.

I try to create a repo name that would make a reasonably informative web site name.
That way I can use the GitHub Pages feature to host the site.

## RStudio projects

Once I have created a repo on GitHub and copied it to my clipboard, I open 
RStudio and create a new project.

## Dependency management

I am now using `{renv}` to manage package dependencies.
So, once I have created the project, I run `renv::init()` to initialize the
project for `renv()`.

To add a package, I run `install.packages(<pkg_name>)`.
Then, I run `renv::snapshot()` to add that package to the list of dependencies.
Running `renv::status()` is a good idea, also.

### Modify .gitignore

::: {.callout-tip}
The `.gitignore` file keeps track of the files that you do *not* want to submit
to version control and thus do *not* want to push to GitHub.
:::

This is a good time to make our first git commit.
I right-click on the `*.Rproj` project and `.Rprofile` files since those are specific to me.
Then I add all of the other files to the commit, add a commit message like 
'initial commit', and make the commit.

To test the GitHub connection, one can push the commit.

::: {.callout-note}
I know that there are ways to automate interactions with GitHub.
Learning those are on my to-do list.
:::

## Directory structure

I prefer that my project's root directory have two subdirectories, `src/`, and `docs/`.
The `src/` directory is where the source code lives.
The `docs/` directory is where the rendered output goes.

GitHub Pages permits the user to select the `docs/` directory for building a site.
So, this structure makes that process very clean when it comes time to publish
a site.

Under `src/`, I have now started creating an `include/` directory that has 
separate subfolders for images (`img/`), CSS styles (`css/`), and references
(`bib/`).
This ensures that resources for other parts of the project are in a consistent
location.

The `dir_tree()` function from the `{fs}` package makes it easy to show the
structure.

```{r}
#| label: src-directory-tree

# Have to use `../src` because this document lives in the `src/` directory.
fs::dir_tree(path = '../src')
```

::: {.callout-note}
With some rare exceptions, I prefer to call functions in packages using their
full names, e.g., `fs::dir_tree('src')`.
This helps avoid namespace conflicts, and it also helps document where a
specific function came from.
It also helps `{renv}` keep track of my project's package dependencies.

The exception is for `{ggplot2}` commands.
I find it much easier to load the library via `library(ggplot2)`, and then
use the associated commands.
:::

## Create _quarto.yml

The `_quarto.yml` files have specific parameters for each type of output.

Note that when using a `src/` and `docs/` directory as described above,
the `output-dir` parameter must be specified to give the path to the `docs/`
directory from the `src/_quarto.yml` file.

```
project:
  type: book
  output-dir: "../docs"
```

## Rendering

To render an entire site or book, I prefer to run `quarto render src` in a terminal.

To render [talk slides](slides.qmd#github-repo) with a single `index.qmd` as the slide file, I run `quarto render index.qmd`.