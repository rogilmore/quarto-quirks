# Sites

This chapter summarizes some things I have learned in creating web sites like
those I use for my courses.

## GitHub repo

As with other output types, I start by creating a GitHub repo.

### Class or workshop site

If the site is for a specific class or workshop, I usually create the repo under
a GitHub [organization](https://docs.github.com/en/organizations/collaborating-with-groups-in-organizations/about-organizations).

My Psychology Department teaching sites go under the 'psu-psychology' organization, found at <https://github.com/psu-psychology>.

Sites related to the Penn State Open Science initiative go under the 'penn-state-open-science' organization found at <https://github.com/penn-state-open-science>.

Within the specific organization, I then create a new repo with a descriptive name and a date: 'psych-490-reproducibility-2024-fall' for example.
When I publish this course site with this name, the URL will be as follows:

<https://psu-psychology.github.io/psych-490-reproducibility-2024-fall>

That's a tad long, but eminently human readable.

## Directory structure

Again, I prefer separate `src/` and `docs/` directories.

## _quarto.yml parameters

I list below most of the components of the `_quarto.yml` file for PSYCH 490.

Note that output is directed to `../docs` because the source files in this 
project (and the `_quarto.yml` file) are located in a separate `src/` directory.

Also note that the `navbar:` parameters consist of a set of `href:` parameters
that specify specific Quarto (`.qmd`) files and a `text:` label that will
be shown in the navigation bar.
The `left:` parameter means these will be left-justified.

Menus of files can be generated by specifying the `text:` label for the menu
and a set of associated files under `menu:`.
Here I've created a subdirectory under `src/` called `exercises/` to hold the
Quarto documents for each exercise.
This keeps the directory structure easy to follow.
But it means that whenever I link to an exercise from somewhere else in the
site, I have to specify the full path.
For example, from `schedule.qmd`, I have to specify 
`exercises/ex01-read-a-scientific-paper.qmd` to link to that document.

```
project:
  type: website
  output-dir: "../docs"

website:
  title: "PSYCH 490 • Fall 2024"
  navbar:
    left:
      - href: index.qmd
        text: home
      - href: about.qmd
        text: about
      - href: schedule.qmd
        text: schedule
      - href: evaluation.qmd
        text: evaluation
      - href: deadlines.qmd
        text: deadlines
      - href: policies.qmd
        text: policies
      - href: values.qmd
        text: values
      - text: exercises
        menu: 
          - href: "exercises/ex01-read-a-scientific-paper.qmd"
          - href: "exercises/ex02-textbook-findings.qmd"
          - href: "exercises/ex03-norms-counternorms.qmd"
          - href: "exercises/ex04-scientific-integrity.qmd"
          - href: "exercises/ex05-p-hacking.qmd"
          - href: "exercises/ex06-apes.qmd"
          - href: "exercises/ex07-replication.qmd"
          - href: "exercises/ex08-sharing.qmd"
          - href: "exercises/final-project.qmd"
      - text: surveys
        menu:
          - href: "surveys/survey-01.qmd"
```

## Rendering

Running `quarto render src` will render all `*.qmd` files in `src/` and its
subdirectories, as long as those subdirectories are not preceded by an 
underscore (`_`).
So, when I am reusing slides from a past year's course, I often put them
in `_notes/` directory so they are readily at-hand, but are not re-rendered.

To have more control over which subdirectories get rendered, you can modify
`_quarto.yml` by adding a `render:` parameter to the `project:` metadata:

```
project:
  type: website
  render:
    - "./*.qmd"
    - "exercises/*.qmd"
    - "surveys/*.qmd"
  output-dir: "../docs"
```

This can be useful when the site has many files, especially ones that involve
computation.
There are other ways to "freeze" documents whose contents do not need to be
regenerated.

## Mixed output types

A couple of semesters back, I figured out how to create a single website that
mixes the "page" style of a website with RevealJS slides.
The key is to create a separate directory for my lecture notes, and then specify
in the YAML header information for the Quarto documents in that folder that they
are RevealJS slides.

So, in the case of [PSYCH 490](https://github.com/psu-psychology/psych-490-reproducibility-2024-fall), I have a `src/notes` directory, and one of the
slide files there has the following YAML header data:

```
title: "Course intro"
subtitle: "2024-08-26 Mon"
author: "Rick Gilmore"
format: 
  revealjs:
    footer: "[PSYCH 490.012 • Fall 2024](../index.html)"
    slide-number: true
bibliography: [../include/bib/packages.bib, ../include/bib/psu-repro.bib]
csl: ../include/bib/apa.csl
css: ../include/css/styles.css
```

The `title:` and `subtitle:` fields are custom to each set of slides.
The others are consistent across slides.
Note that the `footer:` parameter creates a link back to the home page of the site.
This makes the slides part of the site.
Also note that the `bibliography:`, `csl:`, and `css:` parameters specify the 
path *from the `notes/` directory* to the `include/` directory and its 
components.
This is critical to take advantage of Quarto's built-in citation generation
features.

I go back and forth about whether to create a `notes/` menu item with
links to specific lecture notes or simply embed them in the `schedule.qmd`
file.
The menu can get very crowded with too many choices.
So, this term I'm *not* creating a separate notes/slides menu.

::: {.callout-note}

On my to-do list this term is to figure out how to create a folder-specific
YAML file with some of the common parameters.

:::
