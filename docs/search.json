[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Quarto Quirks",
    "section": "",
    "text": "About\nThis Quarto book documents some of the ways I like to use Quarto for e-books, talk slides, and websites.\nSearch engines are extremely useful tools for answering similar questions. Here, I try to capture specific implementations that I have found useful in my own work.\nIn fairness to Quarto, this site has more to do with my quirks than Quarto’s. But I liked the alliteration.\n\n\n\n\n\n\nNote\n\n\n\nI now use Quarto regularly. But there are many, many things I do not yet know about how to use it most effectively.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>About</span>"
    ]
  },
  {
    "objectID": "meta.html",
    "href": "meta.html",
    "title": "Meta",
    "section": "",
    "text": "Github\nAlmost every project starts with a new GitHub repository.\nI try to create a repo name that would make a reasonably informative web site name. That way I can use the GitHub Pages feature to host the site.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Meta</span>"
    ]
  },
  {
    "objectID": "meta.html#rstudio-projects",
    "href": "meta.html#rstudio-projects",
    "title": "Meta",
    "section": "RStudio projects",
    "text": "RStudio projects\nOnce I have created a repo on GitHub and copied it to my clipboard, I open RStudio and create a new project.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Meta</span>"
    ]
  },
  {
    "objectID": "meta.html#dependency-management",
    "href": "meta.html#dependency-management",
    "title": "Meta",
    "section": "Dependency management",
    "text": "Dependency management\nI am now using {renv} to manage package dependencies. So, once I have created the project, I run renv::init() to initialize the project for renv().\nTo add a package, I run install.packages(&lt;pkg_name&gt;). Then, I run renv::snapshot() to add that package to the list of dependencies. Running renv::status() is a good idea, also.\n\nModify .gitignore\n\n\n\n\n\n\nTip\n\n\n\nThe .gitignore file keeps track of the files that you do not want to submit to version control and thus do not want to push to GitHub.\n\n\nThis is a good time to make our first git commit. I right-click on the *.Rproj project and .Rprofile files since those are specific to me. Then I add all of the other files to the commit, add a commit message like ‘initial commit’, and make the commit.\nTo test the GitHub connection, one can push the commit.\n\n\n\n\n\n\nNote\n\n\n\nI know that there are ways to automate interactions with GitHub. Learning those are on my to-do list.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Meta</span>"
    ]
  },
  {
    "objectID": "meta.html#directory-structure",
    "href": "meta.html#directory-structure",
    "title": "Meta",
    "section": "Directory structure",
    "text": "Directory structure\nI prefer that my project’s root directory have two subdirectories, src/, and docs/. The src/ directory is where the source code lives. The docs/ directory is where the rendered output goes.\nGitHub Pages permits the user to select the docs/ directory for building a site. So, this structure makes that process very clean when it comes time to publish a site.\nUnder src/, I have now started creating an include/ directory that has separate subfolders for images (img/), CSS styles (css/), and references (bib/). This ensures that resources for other parts of the project are in a consistent location.\nThe dir_tree() function from the {fs} package makes it easy to show the structure.\n\n# Have to use `../src` because this document lives in the `src/` directory.\nfs::dir_tree(path = '../src')\n\n../src\n├── _quarto.yml\n├── books.qmd\n├── include\n│   ├── bib\n│   ├── css\n│   └── img\n├── index.html\n├── index.qmd\n├── meta.qmd\n├── meta.rmarkdown\n├── plots.html\n├── plots.qmd\n├── plots_files\n│   ├── figure-html\n│   │   ├── fig-dist-a-1.png\n│   │   ├── fig-dist-b-1.png\n│   │   └── fig-dist-c-1.png\n│   └── libs\n│       ├── bootstrap\n│       │   ├── bootstrap-icons.css\n│       │   ├── bootstrap-icons.woff\n│       │   ├── bootstrap.min.css\n│       │   └── bootstrap.min.js\n│       ├── clipboard\n│       │   └── clipboard.min.js\n│       └── quarto-html\n│           ├── anchor.min.js\n│           ├── popper.min.js\n│           ├── quarto-syntax-highlighting.css\n│           ├── quarto.js\n│           ├── tippy.css\n│           └── tippy.umd.min.js\n├── site_libs\n│   ├── bootstrap\n│   │   ├── bootstrap-icons.css\n│   │   ├── bootstrap-icons.woff\n│   │   ├── bootstrap.min.css\n│   │   └── bootstrap.min.js\n│   ├── clipboard\n│   │   └── clipboard.min.js\n│   ├── quarto-html\n│   │   ├── anchor.min.js\n│   │   ├── popper.min.js\n│   │   ├── quarto-syntax-highlighting.css\n│   │   ├── quarto.js\n│   │   ├── tippy.css\n│   │   └── tippy.umd.min.js\n│   ├── quarto-nav\n│   │   ├── headroom.min.js\n│   │   └── quarto-nav.js\n│   └── quarto-search\n│       ├── autocomplete.umd.js\n│       ├── fuse.min.js\n│       └── quarto-search.js\n├── sites.qmd\n└── slides.qmd\n\n\n\n\n\n\n\n\nNote\n\n\n\nWith some rare exceptions, I prefer to call functions in packages using their full names, e.g., fs::dir_tree('src'). This helps avoid namespace conflicts, and it also helps document where a specific function came from. It also helps {renv} keep track of my project’s package dependencies.\nThe exception is for {ggplot2} commands. I find it much easier to load the library via library(ggplot2), and then use the associated commands.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Meta</span>"
    ]
  },
  {
    "objectID": "meta.html#create-_quarto.yml",
    "href": "meta.html#create-_quarto.yml",
    "title": "Meta",
    "section": "Create _quarto.yml",
    "text": "Create _quarto.yml\nThe _quarto.yml files have specific parameters for each type of output.\nNote that when using a src/ and docs/ directory as described above, the output-dir parameter must be specified to give the path to the docs/ directory from the src/_quarto.yml file.\nproject:\n  type: book\n  output-dir: \"../docs\"",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Meta</span>"
    ]
  },
  {
    "objectID": "meta.html#rendering",
    "href": "meta.html#rendering",
    "title": "Meta",
    "section": "Rendering",
    "text": "Rendering\nTo render an entire site or book, I prefer to run quarto render src in a terminal.\nTo render talk slides with a single index.qmd as the slide file, I run quarto render index.qmd.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Meta</span>"
    ]
  },
  {
    "objectID": "books.html",
    "href": "books.html",
    "title": "Books",
    "section": "",
    "text": "_quarto.yml",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Books</span>"
    ]
  },
  {
    "objectID": "books.html#quarto.yml",
    "href": "books.html#quarto.yml",
    "title": "Books",
    "section": "",
    "text": "Adding buttons and links to the repo\nI find it useful to add automatically generated links to the site source code. So, for this project, the following YAML header adds those components site-wide.\nbook:\n  title: \"Quarto Quirks\"\n  author: \"Rick Gilmore\"\n  chapters:\n    - index.qmd\n    - meta.qmd\n    - books.qmd\n    - slides.qmd\n    - sites.qmd\n  repo-url: https://github.com/rogilmore/quarto-quirks\n  repo-actions: [edit, issue]\n  repo-subdir: src\nThe repo-url: is self-explanatory. If you’re using a separate src/ directory, then the repo-subdir: parameter specifies that. If the source code is in the project root directory, you need not specify a value for this parameter. It defaults to the project root.\nTo be clear, no one has yet filed an issue or made a pull request. But they could, and I like the transparency this permits.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Books</span>"
    ]
  },
  {
    "objectID": "slides.html",
    "href": "slides.html",
    "title": "Slides",
    "section": "",
    "text": "GitHub repo\nFor many years, I have made separate repositories for each talk. Course lectures are a special case. I’ll talk about them later.\nSo, my talk to the Central Pennsylvania Observers (CPO) astronomy club sits under a repo titled ‘cpo-talk-radio-astronomy’ that resides under my ‘rogilmore’ GitHub account. I’ve set-up that account to host my blog, and so this means that this talk lives at rick-gilmore.com/cpo-talk-radio-astronomy. This talk should probably have had a date.\nThe single repo per talk scheme works well in this case, and it involves a simpler file directory organization on my local machine. I do not create separate src/ and docs/ directories, nor is a _quarto.yml file needed. I simply create index.qmd, and an include/ directory, then render the output to the project root.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Slides</span>"
    ]
  },
  {
    "objectID": "slides.html#center-citation-below-figure",
    "href": "slides.html#center-citation-below-figure",
    "title": "Slides",
    "section": "Center citation below figure",
    "text": "Center citation below figure\nFor manuscript-like documents, I understand why Quarto defaults to left-justified citations. But when I cite a figure or image source, I like the citation to be centered.\nTo do this, add the following to the relevant CSS for the slide(s):\nfigcaption {\n  margin: auto;\n  text-align: center;\n}\nI’m still looking for a solution to centering the citation for a video.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Slides</span>"
    ]
  },
  {
    "objectID": "sites.html",
    "href": "sites.html",
    "title": "Sites",
    "section": "",
    "text": "GitHub repo\nAs with other output types, I start by creating a GitHub repo.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Sites</span>"
    ]
  },
  {
    "objectID": "sites.html#github-repo",
    "href": "sites.html#github-repo",
    "title": "Sites",
    "section": "",
    "text": "Class or workshop site\nIf the site is for a specific class or workshop, I usually create the repo under a GitHub organization.\nMy Psychology Department teaching sites go under the ‘psu-psychology’ organization, found at https://github.com/psu-psychology.\nSites related to the Penn State Open Science initiative go under the ‘penn-state-open-science’ organization found at https://github.com/penn-state-open-science.\nWithin the specific organization, I then create a new repo with a descriptive name and a date: ‘psych-490-reproducibility-2024-fall’ for example. When I publish this course site with this name, the URL will be as follows:\nhttps://psu-psychology.github.io/psych-490-reproducibility-2024-fall\nThat’s a tad long, but eminently human readable.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Sites</span>"
    ]
  },
  {
    "objectID": "sites.html#directory-structure",
    "href": "sites.html#directory-structure",
    "title": "Sites",
    "section": "Directory structure",
    "text": "Directory structure\nAgain, I prefer separate src/ and docs/ directories.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Sites</span>"
    ]
  },
  {
    "objectID": "sites.html#quarto.yml-parameters",
    "href": "sites.html#quarto.yml-parameters",
    "title": "Sites",
    "section": "_quarto.yml parameters",
    "text": "_quarto.yml parameters\nI list below most of the components of the _quarto.yml file for PSYCH 490.\nNote that output is directed to ../docs because the source files in this project (and the _quarto.yml file) are located in a separate src/ directory.\nAlso note that the navbar: parameters consist of a set of href: parameters that specify specific Quarto (.qmd) files and a text: label that will be shown in the navigation bar. The left: parameter means these will be left-justified.\nMenus of files can be generated by specifying the text: label for the menu and a set of associated files under menu:. Here I’ve created a subdirectory under src/ called exercises/ to hold the Quarto documents for each exercise. This keeps the directory structure easy to follow. But it means that whenever I link to an exercise from somewhere else in the site, I have to specify the full path. For example, from schedule.qmd, I have to specify exercises/ex01-read-a-scientific-paper.qmd to link to that document.\nproject:\n  type: website\n  output-dir: \"../docs\"\n\nwebsite:\n  title: \"PSYCH 490 • Fall 2024\"\n  navbar:\n    left:\n      - href: index.qmd\n        text: home\n      - href: about.qmd\n        text: about\n      - href: schedule.qmd\n        text: schedule\n      - href: evaluation.qmd\n        text: evaluation\n      - href: deadlines.qmd\n        text: deadlines\n      - href: policies.qmd\n        text: policies\n      - href: values.qmd\n        text: values\n      - text: exercises\n        menu: \n          - href: \"exercises/ex01-read-a-scientific-paper.qmd\"\n          - href: \"exercises/ex02-textbook-findings.qmd\"\n          - href: \"exercises/ex03-norms-counternorms.qmd\"\n          - href: \"exercises/ex04-scientific-integrity.qmd\"\n          - href: \"exercises/ex05-p-hacking.qmd\"\n          - href: \"exercises/ex06-apes.qmd\"\n          - href: \"exercises/ex07-replication.qmd\"\n          - href: \"exercises/ex08-sharing.qmd\"\n          - href: \"exercises/final-project.qmd\"\n      - text: surveys\n        menu:\n          - href: \"surveys/survey-01.qmd\"",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Sites</span>"
    ]
  },
  {
    "objectID": "sites.html#rendering",
    "href": "sites.html#rendering",
    "title": "Sites",
    "section": "Rendering",
    "text": "Rendering\nRunning quarto render src will render all *.qmd files in src/ and its subdirectories, as long as those subdirectories are not preceded by an underscore (_). So, when I am reusing slides from a past year’s course, I often put them in _notes/ directory so they are readily at-hand, but are not re-rendered.\nTo have more control over which subdirectories get rendered, you can modify _quarto.yml by adding a render: parameter to the project: metadata:\nproject:\n  type: website\n  render:\n    - \"./*.qmd\"\n    - \"exercises/*.qmd\"\n    - \"surveys/*.qmd\"\n  output-dir: \"../docs\"\nThis can be useful when the site has many files, especially ones that involve computation. There are other ways to “freeze” documents whose contents do not need to be regenerated.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Sites</span>"
    ]
  },
  {
    "objectID": "sites.html#mixed-output-types",
    "href": "sites.html#mixed-output-types",
    "title": "Sites",
    "section": "Mixed output types",
    "text": "Mixed output types\nA couple of semesters back, I figured out how to create a single website that mixes the “page” style of a website with RevealJS slides. The key is to create a separate directory for my lecture notes, and then specify in the YAML header information for the Quarto documents in that folder that they are RevealJS slides.\nSo, in the case of PSYCH 490, I have a src/notes directory, and one of the slide files there has the following YAML header data:\ntitle: \"Course intro\"\nsubtitle: \"2024-08-26 Mon\"\nauthor: \"Rick Gilmore\"\nformat: \n  revealjs:\n    footer: \"[PSYCH 490.012 • Fall 2024](../index.html)\"\n    slide-number: true\nbibliography: [../include/bib/packages.bib, ../include/bib/psu-repro.bib]\ncsl: ../include/bib/apa.csl\ncss: ../include/css/styles.css\nThe title: and subtitle: fields are custom to each set of slides. The others are consistent across slides. Note that the footer: parameter creates a link back to the home page of the site. This makes the slides part of the site. Also note that the bibliography:, csl:, and css: parameters specify the path from the notes/ directory to the include/ directory and its components. This is critical to take advantage of Quarto’s built-in citation generation features.\nI go back and forth about whether to create a notes/ menu item with links to specific lecture notes or simply embed them in the schedule.qmd file. The menu can get very crowded with too many choices. So, this term I’m not creating a separate notes/slides menu.\n\n\n\n\n\n\nNote\n\n\n\nOn my to-do list this term is to figure out how to create a folder-specific YAML file with some of the common parameters.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Sites</span>"
    ]
  },
  {
    "objectID": "plots.html",
    "href": "plots.html",
    "title": "Plots",
    "section": "",
    "text": "About\nThis page documents some tricks for plotting",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Plots</span>"
    ]
  },
  {
    "objectID": "plots.html#plotting-multiple-figures",
    "href": "plots.html#plotting-multiple-figures",
    "title": "Plots",
    "section": "Plotting multiple figures",
    "text": "Plotting multiple figures\nUsing principles of meta-programming, it’s possible and useful to generate similar figures programmatically.\nThe following was loosely adapted from the Survey-03 report used in PSYCH 490.\n\nSetup\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\n\n\nGenerate some data\n\ndf &lt;- tibble::tibble(a = rnorm(100), b = rnorm(100, 1), c = rnorm(100, sd = 2))\n\ndf_dd &lt;- tibble::tibble(q_short = c(\"a\", \"b\", \"c\"), q_long = c(\"question for variable a\", \"question for variable b\", \"question for variable c\"))\n\n\n\nSetup metaprogramming\nDefine the functions.\nRetrieve the “long question” from a data dictionary data frame.\n\n# Retrieve the \"long\" question from the survey_03 data dictionary\nretrieve_long_q &lt;- function(this_q_short= \"a\", data_dict = df_dd) {\n  assertthat::is.string(this_q_short)\n  data_dict |&gt;\n    filter(q_short == this_q_short) |&gt;\n    select(q_long) |&gt;\n    as.character()\n}\n\nretrieve_long_q(\"a\")\n\n[1] \"question for variable a\"\n\n\nDefine the plotting function, the function to return its output, and the section function.\n\nmy_freq_plot &lt;- function(data = df, var) {\n  data |&gt;\n    ggplot() +\n    aes(.data[[var]]) +\n    geom_freqpoly(na.rm = TRUE,\n                  show.legend = FALSE,\n                  bins = 30) +\n    xlim(c(.5, 5.5)) +\n    xlab(\"Rating\")\n}\n\nreturn_plot &lt;- function(data, var) {\n  knitr::knit_child(\n    text = c(\n      \"### Histogram for: `{var}`\",\n      \"\\n\",\n      \"```{r, echo = F}\",\n      \"print(my_freq_plot(data, var))\",\n      \"```\"\n    ),\n    envir = environment(),\n    quiet = TRUE\n  )\n}\n\nreturn_section &lt;- function(data, var) {\n  chunk_hdr &lt;- knitr::knit_expand(text = c(\"### Responses for: `{this_var}`\",\n                                           \"\\n\"),\n                                  this_var = var)\n  \n  # Build fig.cap from ground up\n  fig_name &lt;- paste0(\"fig-dist-\", var)\n  fig_cap &lt;- paste0(\"'Distribution of responses to `\", var, \"`'\")\n  fig_caption &lt;- paste0(\"fig.cap = \", fig_cap)\n\n  plot_chunk_hdr &lt;- paste0(\"```{r \", fig_name, \", echo = FALSE, warning = FALSE, \", fig_caption, \"}\")\n  \n  plot_chunk &lt;- c(plot_chunk_hdr,\n                   \"print(my_freq_plot(data, var))\",\n                  \"```\")\n  \n  question_long &lt;-\n    paste0(\"\\nQ: '\", retrieve_long_q(var), \"'\")\n  \n  knitr::knit_child(\n    text = c(chunk_hdr, plot_chunk, question_long),\n    envir = environment(),\n    quiet = TRUE\n  )\n}\n\nRun using lapply().\nthese_vars &lt;- names(df)\n\nres &lt;- invisible(lapply(these_vars, return_section, data = df))\ncat(unlist(res), sep = \"\\n\")\n\n\nResponses for: a\n\n\n\n\n\n\n\n\nFigure 6.1: Distribution of responses to a\n\n\n\n\n\nQ: ‘question for variable a’\n\n\nResponses for: b\n\n\n\n\n\n\n\n\nFigure 6.2: Distribution of responses to b\n\n\n\n\n\nQ: ‘question for variable b’\n\n\nResponses for: c\n\n\n\n\n\n\n\n\nFigure 6.3: Distribution of responses to c\n\n\n\n\n\nQ: ‘question for variable c’\n\n\n\n\n\n\nPost hoc thoughts\n\n\n\nThe keys to getting this to work were as follows:\n\nIn return_chunk(), generate separate text strings for the header (chunk_hdr), plot chunk (plot_chunk), and long question. See also the sequence for building a suitable string for fig.cap.\nCombine these separate pieces within knitr::knit_child() with the text= parameter.\nIn my_freq_plot(), use the aes(.data[[var]]) syntax to turn the string value for var into an unquoted variable in the dataset.\n\nBottom line: It’s always better to bite off smaller chunks.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Plots</span>"
    ]
  }
]